/*
’¿å’Ê¿’¿â’Ä¾’¥Ñ’¥ê’¥Æ’¥£’¸¡’ºº’Éä’¹æ’¤Î’Éä’¹æ’²½’¤È’Éü’¹æ
 */
#include<stdio.h>
#include<stdlib.h>
#define K 4 //’¾ð’Êó’ÅÀ’¿ô
#define N 9 //’Éä’¹æ’¸ì’Ä¹

static int P[N][N-K] =
  {{1, 0, 1, 0, 0},
   {1, 0, 0, 1, 0},
   {0, 1, 1, 0, 0},
   {0, 1, 0, 1, 0},
   {1, 0, 0, 0, 1},
   {0, 1, 0, 0, 1},
   {0, 0, 1, 0, 0},
   {0, 0, 0, 1, 0},
   {0, 0, 0, 0, 1}};

//’Ä¹’¤µ leng ’¤Î’ÇÛ’Îó s[] ’¤ò’É½’¼¨’¤¹’¤ë
void PrintVec(int *s, int leng)
{
  int i;
  for(i=0; i<leng; i++){
    printf(" %d", s[i]);
  }

  puts("");
}

void Encoder(int *d, int *x)
{
  int i;
  int p[N-K];  //’¸¡’ºº’Éô’¾é’Ä¹’À­()

  //’¸¡’ºº’Éô’¤Î’·×’»»
  p[0] = d[0] ^ d[1];
  p[1] = d[2] ^ d[3];
  p[2] = d[0] ^ d[2];
  p[3] = d[1] ^ d[3];
  p[4] = p[0] ^ p[1];
  //’Éä’¹æ’¸ì’¤Ø’¤Î’ÊÑ’´¹
  for(i=0; i<K; i++){
    x[i] = d[i];
  }
  for(i=0; i<N-K; i++){
    x[i+K] = p[i];
  }
}

void Syndrome(int *y, int *s)
{
  s[0] = y[0] ^ y[1] ^ y[4];
  s[1] = y[2] ^ y[3] ^ y[5];
  s[2] = y[0] ^ y[2] ^ y[6];
  s[3] = y[1] ^ y[3] ^ y[7];
  s[4] = y[4] ^ y[5] ^ y[8];
}

/*
’Ä¹’¤µ leng ’¤Î’ÇÛ’Îó s[], p[] ’¤ò’Èæ’³Ó’¤¹’¤ë’°ì’Ã×’¤·’¤Æ’¤¤’¤ì’¤Ð0’¤ò’ÊÖ’¤·’¡¢’°ì’Ã×’¤·’¤Æ’¤¤’¤Ê’¤±’¤ì’¤Ð0’°Ê’³°’¤ò’ÊÖ’¤¹’¡£
*/
int Diff(int *s, int *p, int leng)
{
  int i;
  int r = 0;
  for(i=0; i<leng; i++){
    r += s[i] ^ p[i];
  }
  return r;
}

/*
  ’Ä¹’¤µleng ’¤Î’ÇÛ’Îó’¤¬’Á´’¥¼’¥í’¤«’È½’Äê
  ’Á´’¥¼’¥í’¤Ê’¤é’¤Ð 0 ’¤ò’ÊÖ’¤·
  ’Á´’¥¼’¥í’¤Ç’¤Ê’¤±’¤ì’¤Ð 1 ’¤ò’ÊÖ’¤¹
 */
int Zero(int *s, int leng)
{
  int i;
  for(i=0; i<leng; i++){
    if(s[i] != 0){ return 1; }
  }
  return 0;
}

void Decode(int *y, int *s, int *h)
{
  int i;
  int posi = N; //’¿ä’Äê’¤·’¤¿’¸í’¤ê’°Ì’ÃÖ

  for(i=0; i<N; i++){ // ’¿ä’Äê’¸ì’¤Î’½é’´ü’²½
    h[i] = y[i];
  }
  
  for(i=0; i<N; i++){
    if(Diff(s,P[i], N-K) == 0){
      posi = i;
      break;
    }
  }
  if( posi == N){
    if(Zero(s, N-K) == 0){ //’¸í’¤ê’¤¬’¤Ê’¤¤’¾ì’¹ç
      return ;
    }
    else{ //’Äû’Àµ’¤Ç’¤­’¤Ê’¤¤’¤¬’¸í’¤ê’¤ò’¸¡’½Ð’¤·’¤¿’¾ì’¹ç
      printf("’¸í’¤ê’¸¡’½Ð\n");
      return ;
    }
  }

  //’¸í’¤ê’¤Î’°Ì’ÃÖ’¤ò’È¿’Å¾
  h[posi] ^= 1;
}

int main(void)
{
  int d[K]; // ’¥á’¥Ã’¥»’¡¼’¥¸
  int x[N]; // ’Éä’¹æ’¸ì
  int e[N]; // ’¸í’¤ê’¥Ù’¥¯’¥È’¥ë
  int y[N]; // ’¼õ’¿®’¸ì
  int s[N-K]; // ’¥·’¥ó’¥É’¥í’¡¼’¥à
  int h[N]; // ’¿ä’Äê’¸ì
  int i, j, k;
  
  // ’¸µ’¤Î’¾ð’Êó’¤Î’Æþ’ÎÏ
  printf("%d bit ’Ê¬’¤Î’¥á’¥Ã’¥»’¡¼’¥¸’¤ò’Æþ’ÎÏ: ",K);
  for(i=0; i<K; i++){
    scanf("%d", &d[i]);
  }

  //’Éä’¹æ’¸ì’¤Î’ºî’À®
  Encoder(d, x);

  //’Éä’¹æ’¸ì’¤Î’É½’¼¨
  printf(" ’Éä’¹æ’¸ì:");
  PrintVec(x, N);
  /*
    for(j=0; j<N; j++)
    e[j]=x[j];
    
  for(j=0; j<N; j++){
  for(k=j+1; k<N; k++){
  e[j] ^= 1;
  e[k] ^= 1;
  */
  //’¸í’¤ê’¥Ù’¥¯’¥È’¥ë’¤Î’Æþ’ÎÏ
  printf("%d bit ’Ê¬’¤Î’¸í’¤ê’¥Ù’¥¯’¥È’¥ë’¤ò’Æþ’ÎÏ:",N);
  for(i=0; i<N; i++){
    scanf("%d", &e[i]);
  }
  
      //’¼õ’¿®’¸ì’¤Î’ºî’À®
  for(i=0; i<N; i++){
    y[i] = x[i] ^ e[i];
  }

  //’¼õ’¿®’¸ì’¤Î’É½’¼¨
  printf(" ’¼õ’¿®’¸ì: ");
  PrintVec(y, N);

  //’¥·’¥ó’¥É’¥í’¡¼’¥à’¤Î’·×’»»
  Syndrome(y, s);

  printf("Syndrome: ");
  PrintVec(s, N-K);
  
  //’Éü’¹æ
  Decode(y, s, h);
  
  /*
  //’¿ä’Äê’¸ì’¤Î’É½’¼¨
  printf(" ’¿ä’Äê’¸ì: ");
  PrintVec(h, N);
  */
  e[j] ^= 1;
  e[k] ^= 1;
    }
  }
  return 0;
}
